{"data":{"type":"notebooks","attributes":{"name":"基礎から学ぶDatadogハンズオントレーニング2024","metadata":{"type":"documentation"},"time":{"live_span":"1h"},"cells":[{"id":"5pqmmt3u","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"# コース開始前の準備\n\n- [Datadog Learning Centerのアカウントを登録](https://learn.datadoghq.com/)\n- [Datadog Foundationコースを登録](https://learn.datadoghq.com/courses/datadog-foundation)し、別のタブで開きながら手順を進めてください\n\n# はじめに\n基礎から学ぶDatadog - ハンズオントレーニング 2024コースへようこそ！このコースでは、Datadogのコアとなる製品や機能について学びます。\n\nDatadogは、SaaS（Software-as-a-Service）型の監視プラットフォームで、次のような目的で設計されています。\n\n- システムが生成するメトリクス、トレース、ログを含む膨大な量の監視データを収集します。\n- すべてのデータを一箇所に集めます。\n- 直感的なフォーマットでデータを整理して表示し、お客様とお客様のチームがより効果的に問題を検出、診断、解決できるようにします。\n\nDatadogは、アプリケーション、セキュリティ、インフラストラクチャ、およびその他の領域に、幅広い機能を通じてオブザーバビリティを提供します。その多くは他のDatadog Learning Centerのコースでも紹介されています。この基礎から学ぶDatadog - ハンズオントレーニング 2024コースの目的は、これらの製品や機能の主要なサブセットを紹介することです。\n\n本トレーニングではDatadogの基本的なスキルを身につけながら、仮想マシンにデプロイされた実際のeコマース・アプリケーションをモニタリングします。\n\n# コースの概要\n**Logs**は、インフラストラクチャのさまざまなコンポーネントからのイベントストリームをキャプチャします。Datadog Log Management を使用すると、すべてのログをコスト効率よく収集、処理、アーカイブ、調査、監視することができます。\n\n**APM**は、アプリケーションにおける内部処理、外部DBやAPIとの接続に関するパフォーマンスデータを取得します。リクエスト数、エラー数、レイテンシといったアプリケーションにおける主要なメトリクスだけでなく、個々のアプリケーショントランザクションにおけるコンポーネント間のやり取りをトレースし、可視化を行うことが出来ます。\n\n**メトリクス**は、環境内のレイテンシ、エラー率、ユーザ登録など、さまざまな測定値を長期にわたって追跡できます。**モニター**は、これらのメトリクスをアクティブにチェックし、重大な変化が発生したとき、たとえば問題を示すしきい値を超えたときに警告を発します。**サービスレベル目標、SLO**は、パフォーマンスの目標を定義し、サービス品質の明確な基準を確立するためのフレームワークを提供します。\n\n**Integration**は、Datadog が個々のサードパーティのソフトウェア、サービス、またはツールを監視できるようにするプラグインまたはアドオンです。Datadogは、Integrationを利用することで、 インフラストラクチャに導入された多くのテクノロジによって生成された、 さまざまなメトリクスやログを統合することができます。\n\n**ダッシュボード**を使用すると、 重要なオブザーバビリティデータを1つのページで視覚化することができます。カスタムダッシュボードをスクラッチから作成することもできますが、すぐに使える（OOTB）ダッシュボードやビルド済みダッシュボードも多数あります。\n\n### 注意事項\n\n- 各セクションに依存関係はありませんのでご興味のあるセクションより開始下さい。\n- 画面左にあるインデックスより所望のセクションに移動して進めて下さい。\n- 演習時間内に全セクションは完了できることは想定しておりません。演習時間中はご興味のあるセクションについて理解を深める、Datadogのエンジニアとディスカッションをすることに集中して頂き、残りのセクションはお持ち帰り下さい。払い出された演習環境は最大2週間有効であり、2週間経過後も何度でもやり直しが可能です。\n\n# 演習環境\n\n各セクションで演習がスタートされると自動で以下の環境が起動し、Webサービスに対するトラフィックも流れます。各演習環境は一定時間後リセットされます。環境が使用不可となった場合は再度演習をスタートしてください。\n\n![environment](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/environment.png)\n\n# Logs\n\nDatadog Log Management を使用すると、すべてのログをコスト効率よく収集、処理、アーカイブ、調査、監視することができます。\n\nDatadog Log Managementを使用すると、次のようなことが可能になります：\n\n- ホスト、コンテナ、クラウドプロバイダなど、さまざまなソースからログを収集できます。\n- ログがDatadogによって取り込まれると、パイプラインやプロセッサを使用してログを拡張したり、ログからメトリクスを作成したり、ログ構成オプションを使用してストレージに最適化されたアーカイブを管理したりすることができます。\n- ログを他のDatadog製品のメトリクスやトレースに紐づけて、より深い洞察を得ることができます。\n- 取り込まれたログは、ログエクスプローラで検索、フィルタリング、クエリできます。\n\nDatadog Foundationのメニューより、[Lab: Logs](https://learn.datadoghq.com/courses/take/datadog-foundation/texts/43932976-lab-logs)を選択し、`Launch`ボタンをクリックしてラボを起動してください。\n\n## Log Explorer\n\nログ エクスプローラーはログの調査とトラブルシューティングを行う場所であるため、時間をかけてログ エクスプローラーのさまざまな部分を調べることができます。\n\n![Log Explorer page with logs from foundation-lab-host.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/log-explorer-overview.png)\n\n1.  ラボが作成した Datadog トレーニング アカウントの認証情報を使用して [Datadog](https://app.datadoghq.com/) にログインします。 試用版の認証情報を取得する必要があるときはいつでも、ラボ ターミナルで `creds` コマンドを実行できます。\n\n2.  **[Logs > Search](https://app.datadoghq.com/logs)** に移動します。\n\n注: [Discover Datadog Log Management] ページが表示された場合は、 **Get Started** ボタンをクリックします。 ポップアップ ダイアログで、 **Get Started** ボタンをクリックします。\n\n### Time Range\n\n時間範囲セレクターは、ログ エクスプローラーに表示されるログの時間範囲を制御します。\n\n![Time range drop down menu is set to past 15 minutes.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/time-range-dropdown.png)\n\n1.  ページの右上隅に、時間範囲のドロップダウン メニューがあります。 デフォルトは `Past 15 Minutes` です。\n\nこれを `Live Tail` に変更し、リストの作成が開始されるまで待ちます。\n\nLive Tail を使用すると、インフラストラクチャ内のどこからでもすべてのログ イベントにリアルタイムでアクセスできます。 このビューでは、インデックスが作成されているかどうかに関係なく、すべてのログを表示できます。 これは、プロセスが正しく開始されたかどうか、または新しいデプロイメントがスムーズに完了したかどうかを確認する場合に便利です。\n\n2.  時間範囲を `Past 15 Minutes` に戻します。\n\n### Search Bar\n\n検索バーを使用すると、クエリを使用してログを検索およびフィルタリングできます。\n\n![Log Explorer search bar is empty.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/logs-search-bar.png)\n\n検索バーの下には、ログをフィールド、パターン、またはトランザクションにグループ化し、ログをリスト、時系列、上位リスト、テーブル、ツリー マップ、または円グラフとして視覚化するオプションがあります。\n\n1.  検索バーに `service:store-frontend` と入力し始めると、検索バーのオートコンプリート機能により、クエリを完了するための値が表示されます。\n\n表示されたら、オートコンプリート リストで `store-frontend` を選択し、`store-frontend` サービスからのすべてのログを表示します。\n\n2.  検索バーをクリアします。\n\n\n### Facet panel\n\n前のセクションでは検索バーに入力してデータをフィルタリング、グループ化しましたが、**ファセット** パネルはデータを探索するためのより簡単な方法です。\n\n![The facet panel has the core facets expanded.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/facet-panel.png)\n\n1.  ログ リストの左側にはファセット パネルがあります。 **Service** で `store-frontend` をクリックして、 `store-frontend` サービスからのログのみを表示します。\nこれにより、以前と同じログのリストが作成されます。\n\n2.  別のファセットを選択してログをフィルタリングしてみてください。簡単に所望のログのみをフィルタリング出来ることがお分かりいただけるかと思います。\n\n3.  検索バーをクリアします。\n\n```\n[重要] 特別なクエリ言語をイチから学んで頂く必要なく、組織の誰もが使えるログ検索機能を提供します。\n```\n\n### Log side panel\n\nログはデフォルトでリスト表示されます。 リスト内のログをクリックすると、サイド パネルが開きます。\n\n![The log side panel shows details about the log.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/log-side-panel.png)\n\n1.  ログ リストから、ステータスが `Info` である `store-backend` からのログをクリックします。\n\nヒント: 検索バーまたはファセット パネルを使用してログをフィルタリングしてみてください。\n\n2.  ログのサイド パネルの上部には、インフラストラクチャまたはアプリケーションに関する一般的なコンテキスト情報が表示されます。 情報はタグから収集されます。 タグは、Datadog Agent または Log Forwarder によって自動的に付加されるか ( `host`、 `container_name` など)、またはカスタム タグ ( `team`、`env` など) を通じて追加されます。\n\nログメッセージを見てください。 ログ メッセージが切り詰められている場合は、 **Show More** をクリックしてログ メッセージ全体を表示します。\n\nログ メッセージの下には、ログが他のデータとどのように相関しているかを示すさまざまなタブがあります。\n\n3. **Event Attributes**タブには、ログ属性の名前と値が JSON 形式で表示されます。 属性を操作して、属性によるフィルタリング、ログ テーブルへの列の追加、ファセットの作成などのアクションを実行できます。\n\n4.  **Trace** タブをクリックします。 ログへのトレース挿入が有効になっている場合は、選択したログがトレース全体のコンテキストで表示されます。 **View Trace Details** をクリックすると、後に紹介するAPM データを詳しく調べることができます。\n\n5.  **Metrics** タブをクリックします。 ここでは、ログ周辺の 30 分の時間枠でインフラストラクチャ メトリックを表示できます。\n\n```\n[重要] Datadogではプラットフォームに収集されたログ/APM/メトリクス(オブザーバビリティの3本柱とも呼ばれます。)を相関付け、単一のページで確認出来ることが強みとなっています。これによりそれぞれのツールを切り替えながら各種データを確認するのに掛かる無駄な時間を削減し、ひいてはシステム障害による機会損失の低減が可能となります。\n参考: CNCF Observability Whtepaper https://github.com/cncf/tag-observability/blob/main/whitepaper.md#observability-signals\n```\n\n## Search, Filter, and Query\n\n### Filter using log attributes\n\nログ属性を使用してログをさらにフィルタリングできます。\n\n1.  ログのリストから\"Total advertisements available.\" で始まるログ メッセージが含まれるログエントリを探しクリックします。 ログ メッセージは、ログ リストの **CONTENT** 列で表示できます。\n\n2.  ログのサイド パネルで、**Event Attribute** の下にこのログのさまざまな属性を表示できることに注目してください。 これらのログは、 `ads.py` ファイルから取得されているようです。 その `filename` 属性を使用して、 `ads.py`  ファイルに由来するすべてのログを検索するにはどうすればよいでしょうか?\n\n![Log side panel showing filename attribute highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/filename-attribute.png)\n\n3.  `Filename` 属性をクリックし、ポップアップ メニューから **Filter by @filename:ads.py** でフィルターを選択します。\n\n検索クエリが `@filename:ads.py` を含むように更新されたことに注目してください。 `@` は、特定の属性を検索していることを示します。\n\n4.  サイド パネルを閉じて、アプリケーションの `ads.py` ファイルから生成された `store-ads` ログのリストに戻ります。\n\n![List of logs from the ads.py file.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/logs-ads-py.png)\n\nこれでログ属性によるフィルタリングがうまくいきました。\n\n```\n[重要] ログ内の任意のフィールドをクリックのみでフィルタ条件として使用することが出来ます。\n```\n\n### Filter using text strings from log messages\n\n`\"Total advertisements available\"` というログ メッセージが含まれるログのみを表示したい場合はどうすればよいでしょうか? ログメッセージの文字列を使用して検索できます。\n\n1.  検索バーでクエリをクリアし、次のように入力します。テキスト文字列の前後には必ず二重引用符 \" を含めてください。\n\n```\n\"Total advertisements available\"\n```\n\n2.  ログ メッセージに `\"Total advertisements available\"` というテキスト文字列を含むログのリストが表示されます。\n\n![List of logs with a log message of \"Total advertisements available.\"](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/total-ads-available.png)\n\n3.  完了したら、検索バーをクリアします。\n\n```\n[重要] ログ中の特定文字列検索は従来の監視ツールでもよく使われる手法ですが、Datadogももちろんサポートしています。\n```\n\nこれで、ファセット パネルまたは検索バーを使用して検索クエリを作成する方法がわかりました。\n\n## Customize the Log Explorer\n\n### Create a custom facet\n\nDatadog がログを解析すると、共通のタグと属性がファセット パネルに自動的に表示されます。 ファセットは定性的または定量的なデータ分析に役立つため、ファセットを使用してログの検索、ログ パターンの定義、ログ分析の実行を行うことができます。 自動生成されたファセットは便利ですが、ファセット パネルに表示される独自のカスタム ファセットを作成することもできます。 これは、ログ サイド パネルのログの詳細を利用して実行できます。\n\n1.  ログ メッセージに \"influencer specific discounts\" が含まれる `store-discounts` ログのリストから、ログ行の 1 つをクリックしてログのサイド パネルを開きます。\n\n2.  **Event Attributes**で、`process` 属性の `name` をクリックし、ポップアップ メニューから **Create facet for @process.name** を選択します。\n\n**Add facet** ポップアップダイアログが表示されます。 追加のフィールドを表示する場合は、 **Advanced** を展開します。\n\n3.  **Add** をクリックします。\nファセットが正常に追加されたことを確認するメッセージが表示されます。\n\n4.  ログのサイド パネルを閉じ、ページ上部の検索バーをクリアします。\n\n5.  ファセットパネルの一番下までスクロールします。 **OTHERS** ファセット グループの下で、**process.name** ファセットを展開します。\n\n新しいファセットが表示されるには、新たなログが収集および処理されるまで待つ必要がある場合があります。しばらく待つとログ エントリで見つかったこの属性のさまざまな値が表示されるようになります。\n\n![The process.name facet is expanded.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/process-name-facet.png)\n\n6.  `discounts` を選択して、`process.name` 属性値が `discounts` である行ごとにログをフィルターします。\n\n7.  完了したら、検索バーをクリアします。\n\n```\n[重要] ログ中の任意のフィールドをファセットとして追加することでさらにログの検索性が上がります。同じファセットを他のユーザも利用できるようになり、属人性の低減にも寄与します。\n```\n\n使用可能な検索コンテキストは、割り当てたタグとログから抽出された属性によって異なります。\n\n## Log Aggregation\n\n### Field Aggregations\n\nField aggregationでは、クエリ フィルターに一致するすべてのログが、指定されたログ ファセットのさまざまな値に基づいてグループに分割されます (つまり、集約されます)。 この方法でログを集約またはグループ化すると、傾向をより明確に確認し、さまざまな種類のログ ファセット間の関係を視覚化するのに役立ちます。\n\n注: このコースではフィールドごとのログの集計について説明しますが、[patterns](https://docs.datadoghq.com/ja/logs/explorer/analytics/patterns/) や [transactions](https://docs.datadoghq.com/ja/logs/explorer/analytics/transactions/)ごとにログを集計することもできます。 興味がある場合は、リンクを使用してこれらの集計タイプの詳細を確認してください。\n\n1.  **[Logs > Search](https://app.datadoghq.com/logs)** に移動します。\n\n2.  検索バーの下で、 **Group into** の横にある `Fields` を選択し、 **Visualize as** で `Timeseries` を選択します。ログのリストをグラフで視覚化したものがログのリストに置き換わります。\n\n![A bar graph showing the number of log entries over time.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-timeseries.png)\n\n3.  これはログの数を視覚化したものとしては興味深いかもしれませんが、たとえば `Service` ごとにログをグループ化して表示できれば、さらに便利になるでしょう。\n\n**by** の横にある `Everything` を `Service (service)` に変更して、サービスごとにグループ化します。\n\n![A timeseries graph showing a count of all logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-timeseries-grouped.png)\n\nどのサービスが最も多くのログを生成しているかを視覚化できるようになりました。\n\nどのサービスがエラー ログを生成しているかを確認したい場合はどうすればよいでしょうか?\nファセット パネルまたは検索バーを使用して、`error` ステータスを持つログをフィルタリングします。\n\n![A timeseries graph showing a count of error logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/error-field-agg.png)\n\nどのサービスがエラーログを生成しているのか、またこれらのエラーがいつ発生しているのかを簡単に視覚化できるようになりました。 この例では、`store-ads` サービスと `store-discounts` サービスがエラー ログを生成しており、`store-ads` サービスがエラーの大部分を生成しています。 4 分ごとに急増していることもわかります。\n\n他の視覚化オプションを選択して、どのように見えるかを確認します。 一部のビジュアライゼーションは、他のビジュアライゼーションよりも必要なデータを表示するのに優れている場合があります。\n\n- **Top List**\n![A top list showing a count of all logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-toplist.png)\n\n- **Table**\n![A table showing a count of all logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-table.png)\n\n- **Tree Map**\n![A tree map showing a count of all logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-treemap.png)\n\n- **Pie Chart**\n![A pie chart showing a count of all logs grouped into fields by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/fields-agg-pie-chart.png)\n\n```\n[重要] ログをソースとしたデータ解析も可能です。時系列表記だけでなく、ランキング、表、パイチャートなど様々なデータ表現形式をサポートします。日々の手入力によるデータ集計作業を自動化、リアルタイム化します。\n```\n\n### Export Graphs\n\nログの視覚化を Datadog の他の領域にエクスポートできます。 ログからカスタム メトリックを作成したり、集計データを CSV としてダウンロードしたりすることもできます。\n\n1.  ビジュアライゼーションを `Timeseries` に戻します。\n\n2.  グラフの上にある **Save to Dashboard** ボタンをクリックします。\n\n注: その横にある **More** ボタンをクリックすると、ログをエクスポートするさまざまな方法が表示されます。\n\n3.  **Export graph**ポップアップ ダイアログで、 **New Dashboard** リンクをクリックします。\n\n![Export graph dialog with New Dashboard highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Logs/export-graph-dashboard.png)\n\n4.  ページの上部の通知には、新しいダッシュボードへのリンクが含まれています。\n\nダッシュボードを表示したい場合は、リンクをクリックしてください。\n\n```\n[重要] データ解析結果をダッシュボードに出力し、他チームや経営層、協力会社様へのレポートにご利用頂けます。\n```\n\n後ほど別のラボでダッシュボードをより深く学びます。\n\n---\n\n![](https://addons.mozilla.org/user-media/previews/thumbs/255/255651.jpg?modified=1622133878)\n\n---\n\n# APM\n\n最新のソフトウェア・アプリケーションは、頻繁に更新されるコードの断片で構成されており、通常、多様なインフラに分散しています。このため、パフォーマンス問題の原因を突き止めるのはしばしば困難です。パフォーマンスの突然の変化は、次のような原因が考えられます。\n\n- エラー状態の増加？\n- データベースクエリが遅い？\n- ハードウェアの過負荷？\n- クラウドサービスの停止？\n\nDatadogのエンドツーエンドの分散トレース、APM、およびプロファイラを使用すると、トレースをフロントエンドとバックエンドのデータと関連付けることによって、これらの問題を特定することができます。これにより、サービス間の相互作用や依存関係のパフォーマンスをより完全に把握することができ、レイテンシを削減し、多くのリソースを使用しているプロセスを特定し、ユーザーエクスペリエンスに悪影響を与えるエラーを排除することができます。\n\nDatadogは、あらゆる技術スタックにAPMを実装するための多くのソリューションを提供しており、アプリケーション・レベルからホスト、コンテナ、サーバーレス機能などに至るまでのトレース・メトリクスを収集し、関連付けることができます。様々なサービス間でこれらのメトリクスを関連付ける能力を持つことで、アプリケーションを強化するために何ができるのか、どこでそれを行うべきなのかをよりよく理解することができます。さらに、あなたや組織のメンバーは、APMのトレースに基づいてモニターを作成し、サービスが最適なパフォーマンスでない場合に警告を出すことができます。\n\n本セクションではDatadog アプリケーションで APM トレースをどのように読むか、トレースとログをどのように関連付けるか、アプリケーションの問題を特定するためにモニタをどのように使用するかについて理解を深めます。\n\nDatadog Foundationのメニューより、[Lab: Logs](https://learn.datadoghq.com/courses/take/datadog-foundation/texts/43932976-lab-logs)を選択し、`Launch`ボタンをクリックしてラボを起動してください。\n\n注: Learning CenterのDatadog FoundationコースにはAPMのメニューがありません。ここでは**Logs**を選択ください。\n\nターミナルの上にある`Storedog`タブをクリックしてください。こちらが今回監視対象となるWebサービスです。\n\n## Navigate the Service Catalog\n\nこのラボが始まってから、Agentはあなたのアプリケーションサービスからトレースを収集し続けています。次に、Datadog でこれらのサービスの状態を確認し、そのトレースを調べます。\n\n1. ラボが作成した Datadog トレーニング アカウントの認証情報を使用して [Datadog](https://app.datadoghq.com/) にログインします。 試用版の認証情報を取得する必要があるときはいつでも、ラボ ターミナルで `creds` コマンドを実行できます。\n\n2. Datadogで[APM > Service Catalog](https://app.datadoghq.com/services?env=foundation-lab)に移動します。`env:foundation-lab`が選択されていることを確認してください。\n\n![Service Catalog page with `env:foundation-lab` environment selected](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/service-catalog-env.png)\n\n3. 有効になっている全てのサービスのリストが表示されます。Datadogエージェントと直接通信しないPostgreSQLコンテナである`database`も表示されます。\n\nデータベースが表示されるのは、`store-backend`、`store-ads`、`store-discounts`のトレースがそれを捕捉しているからです。PostgreSQL自体はAgentにトレースを送信しません、ここではデータベースに接続するアプリケーションがトレースを送信しています。\n\n同様に、`store-backend-cache`など、Dockerコンテナに対応しない新しいサービスもいくつか見られます。store-backendサービスは、アプリケーションのこれらの補助的な領域をサービスとして自動タグ付けするようにインストルメント化されています。\n\n4. 左上隅の[Map](https://app.datadoghq.com/services?env=foundation-lab)を選択すると、各サービスが互いにどのように通信しているかのサービスマップが表示されます。\n\n![The Service Map displays the flow of requests between services](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/apm_service_map_flow.png)\n\n注: このマップは、Datadogが新しいトレースを受信してから表示されるまでに時間がかかることがあります。今すぐ表示されない場合は、ページをリフレッシュするか、後で再度アクセスしてください。\n\n5. 右上の**Map layout**ボタンに注目してください。**Cluster**と**Flow**を切り替えて違いを確認してください。**Flow**レイアウトはより大きなサービスマップに適しています。\n\n6. 左上の[List](https://app.datadoghq.com/services)を選択すると、サービスカタログのリストビューに戻ります。\n\n```\n[重要] サービスカタログのデフォルトビューは`Performance`ですが、他のタブをクリックしてみましょう。例えば`Ownership`タブでは各サービスを開発・運用しているチームやコンタクト先、ソースコードレポジトリを、`Security`タブではアプリケーションのライブラリやコードの脆弱性、脆弱性を突いた脅威についての情報がまとまっています。\n```\n\n7. リストの`store-discounts`にカーソルを合わせ、**Full Page**をクリックすると、`store-discounts`のサービスページが開きます。\n\n8. `store-discounts`ページで、**Service Summary**セクションで利用可能なさまざまなグラフを調べます。\n\n```\n[重要] RED(Request/Error/Duration)メトリクスと呼ばれるアプリケーションレベルの重要な指標をデフォルトで提供し、 後に説明するダッシュボードへのエクスポートも可能です。\n```\n\n9. **Resources**セクションまでスクロールダウンします。ここではAPMがトレースしたサービスのアプリケーションエンドポイントが表示されます。このサービスのリソースをリクエスト、レイテンシ、エラー、時間でソートして、トラフィックが多いエンドポイントや潜在的な問題を発見することができます。`store-discounts`サービスは `GET /discount`のエンドポイントのみを持っています。\n\n\n![Discounts service resources](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/discounts_apm_services_resources.png)\n\n\n10. クリックすると、サイドパネルが開き、リソースに関するOOTBのグラフ、リソースの依存性マップ、スパンサマリー表が表示されます。スパンはトレース内の単一の操作を表し、トレースはアプリケーションがリクエストの処理に費やした時間とこのリクエストのステータスを追跡します。\n\n```\n[重要] 環境変数等でversionタグを設定することによりアプリケーションのバージョンに対するアプリケーションパフォーマンスを可視化可能です。新バージョン展開によるサービスレベルのデグレがないかを視覚的に切り分け頂けます。\n```\n\n一番下までスクロールすると、リソースのスパンの表が表示されます。\n\n11. **Span Summary**表の下で、**Errors only**スイッチを無効にします。\n\nこれはリソースのインデックスされたスパンを表示します。\n\n![Table of indexed spans for the GET /discount resource](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/resource_indexed_spans.png)\n\n12. インデックスされたスパンをクリックすると、スパンのフルトレースのフレームグラフを表示する別のサイドパネルが開きます。\n\nフレームグラフとは、トレースを視覚化したもので、それぞれの帯は異なるスパンを表し、スパンの実行時間、そのスパンを呼び出したもの、そのスパンが行った呼び出しを示します。\n\n```\n[重要] 1回の呼び出しが1つのスパン、スパンの横幅が1回の呼び出しあたりの実行時間を示します。過剰なデータベースアクセスやスロークエリ問題を迅速に特定可能です。\n```\n\nこれで、サービスカタログから特定のサービスリソースのトレースにドリルダウンする方法がわかりました。次に、すべてのサービスのトレースを一箇所で見てみましょう。\n\n## Explore all service traces\n\nAPMトレース・ページでは、すべてのサービスのトレースが一箇所に表示されます。\n\n1. [APM > Traces](https://app.datadoghq.com/apm/traces?query=env%3Afoundation-lab)に移動します。ここには APM が過去 15 分間にキャプチャしたトレースのライブストリームが表示される。検索フィールドに `env:foundation-lab` 以外のものが含まれている場合は、それをクリアして `env:foundation-lab` と入力します。\n\n2. `service`名でトレースをフィルタリングします。左側のファセットパネルを使って `store-discounts` サービスでフィルタリングしてください。\n\n3. `store-discounts`トレースをクリックすると、トレースの詳細サイドパネルが開き、そのトレースのフレームグラフが表示されます。フレームグラフには、このトレースの各サービスに費やされた時間が表示されます。\n\n![Trace side panel showing a flame graph](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/apm_traces_flamegraph.png)\n\n```\n[重要] トレースを見てみましょう。上の画像例ではブラウザアプリケーションから/discountのAPIが呼び出され、store-discountsサービスからpostgresデータベースに対して無数のデータベースクエリが投げられている（いわゆるN+1問題）ことを示しています。これによりブラウザリクエストへのレスポンスに4.53秒という時間が掛かっています。よって次のアクションとしてはstore-discountsアプリケーションのチームに報告し、N+1問題を解決する修正を行ってもらうことが考えられます。\n```\n\n## Traverse between APM traces and logs\n\nトレース中にアプリケーションがログを出力した場合、トレース詳細パネルから直接ログにジャンプすることができます。\n\n1. 前セクションで確認したトレース詳細パネルに移動し、下部にある **Logs**タブをクリックします。上部の水平の仕切りをドラッグすることで、ログの表示領域のサイズを変更することができます。\n\nこれらは、トレースの時間枠内にキャプチャされた関連ログ行です。\n\n![Logs tab showing logs related to the trace](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/apm_traces_logs.png)\n\n2. それぞれのログ行にマウスオーバーし、フレームグラフを見てください。トレースの中で、ログ行が放出された正確なポイントを示す垂直線が表示されます。これは、`DD_LOGS_INJECTION: true`の環境変数を設定することで有効になります。\n\n3. **Logs**テーブルで、**Hosts**カラムの一番端にある**Open in Log Explorer**のアイコンをクリックします。\n\n![Open the traces logs in the Log Explorer](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/APM/discounts_trace_logs.png)\n\nこれにより新しいタブでログエクスプローラーが開かれます。ここでは `trace_id`という属性情報に基づいて、表示したトレースに関連するログのみを見ることができます。\n\n```\n[重要] トレース画面に戻って他のタブも見てみましょう。\"Infrastructure\"タブではアプリケーションを展開しているホストやコンテナのメトリクス、\"SQL Queries\"タブではトレース内で呼び出されているデータベースクエリのリスト、\"Code Hotspots\"タブではプロファイラ機能によりstore-discountsサービス内のどの関数でどれだけの実行時間となっているかの情報が得られます。既にご紹介したログとトレースの相関以外にも、トレースとあらゆる情報を関連付けてご確認頂けます。\n```\n\n# Metrics, Monitors, SLOs\n\n**メトリクス**は、Datadogの世界では最小の単位ですが、可視化され、測定され、監視されることで、インフラストラクチャに多大な洞察を与えます。メトリクスは、レイテンシ、エラー率、ユーザ登録数など、一定期間におけるシステムのあらゆる側面に関する数値測定値です。Datadog では、 メトリック・データは、 値とタイムスタンプを含むデータ・ポイントとして受信され、保持されます。\n\n**モニター**は定義した許容範囲から外れたときに通知を送信します。\n\n**サービスレベル目標(SLO)** は、品質基準を定義するため、長期間のメトリクスを追跡します。\n\nDatadog Foundationのメニューより、[lab: Metrics, monitors, SLOs](https://learn.datadoghq.com/courses/take/datadog-foundation/texts/43933014-lab-metrics-monitors-slos)を選択し、`Launch`ボタンをクリックしてラボを起動してください。\n\n## Metrics Explorer\n\nメトリクス エクスプローラーは、Datadog でメトリクスを調べて視覚化するためのインターフェイスです。グラフは、Datadog が環境から取り込むメトリクスを視覚的に表現するもので、データの傾向、パターン、異常をすばやく把握できます。 Storedog アプリからいくつかのメトリクスをグラフ化してみてください。\n\n1.  **[Metrics > Explorer](https://app.datadoghq.com/metric/explorer)** に移動します。\nページの右上隅に、時間範囲のドロップダウン メニューがあります。 デフォルトは `Past 1 Hour` です。\n\n2.  時間枠を `Past 30 Minutes` に変更します\n\n![Metrics Explorer page with time range selector highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/metrics-explorer-time-range.png)\n\n### Query editor\n\nMetrics Explorer ページの上部近くには、グラフのカスタマイズに使用できるクエリ エディターがあります。\n\n![The query editor with docker.cpu.system in the query field.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/query-editor.png)\n\n1.  クエリ エディターの検索フィールドで、`docker.cpu.system` を検索します。\n\n結果のグラフは、過去 30 分間に CPU がシステム コールを実行していた時間の割合を示します。\n\n2.  **avg by** テキスト ボックスを使用すると、Datadog が特定のメトリックに対して受け取る個別の値を結合するために使用されるメソッド (スペース集約と呼ばれます) を定義できます。 スペース集約では、集約される値は、特定のグループのすべてのメンバー (たとえば、クエリ フィルターに一致するすべてのホスト) によって報告された同時測定値を反映します。\n\nスペース集約の可能なオプションには、レポート値の平均 (デフォルト)、最大、最小、および合計が含まれます。 詳細については、[Space aggregation](https://docs.datadoghq.com/ja/metrics/#space-aggregation) に関するドキュメントを参照してください。\n\n**avg by** の横にあるテキスト ボックスをクリックし、`service` と入力します。\n\n![Graph showing docker.cpu.system metric for 9 services with avg by text box highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/metrics-agg.png)\n\nグラフには、`service` ごとにグループ化された `docker.cpu.system` メトリックが表示され、測定された各時点のコンテナー間で平均された値が表示されます。 したがって、この特定のグラフを使用すると、さまざまなサービス間でメトリクスを比較し、データ内の異常を見つけることができます。\n\n3.  また、**from** テキスト ボックスを使用してタグ値を選択または検索して、フィルタリング範囲を定義することもできます。まずテキストボックスの **avg by** をクリアします。\n\n4.  **from**の横にあるテキスト ボックスをクリックし、`service:store-ads` と入力し始めます。\n\n5.  `service:store-ads` を選択して、`store-ads` サービスの `docker.cpu.system` メトリクスをグラフ化します。\n\n![The query editor service:store-ads in the from text box.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/query-editor-from.png)\n\nこれで、`store-ads` を選択し、そのサービスのみの指標を調べることができます。\n\n6.  `store-discounts` の `docker.cpu.system` メトリクスもグラフ化したい場合はどうすればよいでしょうか? これにより、2 つのサービスを並べて比較することができます。\n\nクエリ エディターの検索フィールドの下にある **+ Add Query** ボタンをクリックします。 これにより、新しいクエリ エディターが開きます。\n\n7.  新しい **from** テキスト ボックスで、`service:store-ads` を `service:store-discounts` に置き換えます。\n\n![Metrics Explorer with two query editors and two graphs.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/two-query-editors.png)\n\n既存のグラフの隣に追加のグラフがどのように追加されているかに注目してください。 それらを 1 つに結合したい場合はどうすればよいでしょうか?\n\n8.  2 つのクエリを 1 つのグラフにグラフ化するには、**One graph per query** ボタンをオフに切り替えます。\n\n![Two metrics are shown in one graph with the one graph per query button togged off.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/one-graph-two-queries.png)\n\n9.  グラフの右上隅にある **View full screen** アイコンをクリックして、グラフを全画面で表示します。\n\n![Graph with two queries in full screen mode.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/graph-full-screen.png)\n\nここでは、クイック関数を適用してグラフを変換し、現在のメトリクスを前の期間と比較できます。\nこのviewを覗いてみてください。 完了したら閉じて、Metrics Explorer ページに戻ります。\n\n```\n[重要] 各メトリクスに付与されたメタデータ(タグ)の情報を用いてフィルタリング、グルーピングが可能です。\n```\n\n### Export to dashboard\n\n1.  **Save to Dashboard** ボタンをクリックすると、グラフをエクスポートするダッシュボードを選択するようポップアップ モーダルが表示されます。\n\n**New Dashboard** リンクを選択して、このグラフを含む新しいダッシュボードを作成します。\n\n![An Export graph popup modal with the New Dashboard link highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/export-graph.png)\n\n2.  **[Dashboards > Dashboard List](https://app.datadoghq.com/dashboard/lists)** に移動します。\n\n3.  現在の日付と時刻が印刷されているリストの上部にある新しいダッシュボードをクリックします。\n\n![Dashboard list with the first dashboard highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/new-dashboard.png)\n\nダッシュボードにメトリクス グラフが表示されるはずです。\n\n![Dashboard with a metrics graph.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/dashboard-graph.png)\n\n```\n[重要] 本セクションのようにMetrics Explorerで作ったグラフをウィジェットとしてダッシュボードにエクスポートも出来ますし、ダッシュボードのウィジェットから直接グラフを作成することで同じ結果を取得することもできます。\n```\n\n## Monitors\n\n### Create a metric-based monitor\n\nメトリクスを検索、フィルタリング、グラフで視覚化すると、問題を簡単に発見できます。 しかし、何か問題が起こっていないかどうかを確認するために、これらのグラフを一日中見ることはできません。\n\nそこでモニターが役に立ちます。 モニターは、メトリクス、Integrationの可用性、ネットワーク エンドポイントなどをアクティブにチェックできます。\n\nここでは `store-discounts` サービスにおける`trace.flask.request` メトリクスがしきい値の2秒を超えたときにチームに警告するモニターを作成します。\n\n1.  **[Monitors > New Monitor](https://app.datadoghq.com/monitors/create)** に移動します。\n\nDatadog が提供するすべての種類のモニターに注目してください。 各タイプの上にカーソルを置くと、その概要が表示されます。\n\n2.  **Metric** をクリックして、新しいメトリックベースのモニターを作成します。\n\n3.  右上隅で、時間枠を `Past 1 Hour` に変更します。\n\n4.  **Choose the detection method** では、**Threshold Alert** のデフォルト値をそのまま使用します。 メトリックが設定したしきい値を超えると、アラートがトリガーされます。\n\n5.  **Define the metric** で、メトリックフィールドに `trace.flask.request` と入力し、**From** フィールドに `service:store-discounts` と入力します。\n\n![Query for the new monitor is highlighted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/monitor-query.png)\n\n6.  アラートと警告のしきい値を定義します。\n\n**Set alert conditions** で、**Alert threshold** を 2 に、**Warning threshold** を 1.5 に設定します。\n\n![Alert and warning threshold is set to 2 and 1.5 seconds.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/alert-conditions.png)\n\nメトリックが警告しきい値とアラートしきい値を超えると、アラートがトリガーされます。\n\n7.  **Notify your team** で、モニターに名前を付け、モニターの警告メッセージを設定できます。\n\nモニター名として、次を貼り付けます。\n\n```\nDiscounts service request time\n```\n\n注: 次のアクティビティに進むには、モニターの名前が上記と一致する必要があります。\n\n8.  監視メッセージの場合は、何を探すべきか、誰に通知すべきか、その他の役立つ情報を他の人に知らせる簡単なメッセージを作成します。 独自のメッセージを書いてみたり、以下のメッセージを自由に使用してみてください。\n\n```\nInvestigate the source of the problem. Try checking the [APM service page](https://app.datadoghq.com/apm/services/store-discounts/operations/flask.request?env=foundation-lab&start=1684155366000&end=1684158966000&paused=false) for `store-discounts`. Contact @incident@example.com after triage.\n```\n\n注: 電子メール アドレスの前にある @ 記号は、そのユーザーが組織の一部である場合、そのユーザーの Datadog プロファイルへのリンクとして表示されます。 このアクティビティでは、参照ユーザー (incident@example.com) は存在しませんが、通知メールがどのように送信されるかを確認したい場合は、ご自身のメール アドレスを自由に追加してください。\n通知テキスト領域の特別な構文機能の詳細については、[Notifications docs](https://docs.datadoghq.com/ja/monitors/notify/) を参照してください。 これらのドキュメントでは、Slack、PagerDuty、Webhook の Datadog 統合によって可能になる強力な通知ベースの機能についても説明しており、将来的には他の機能も可能になります。\n\n9.  このアクティビティでは、残りのデフォルト設定をそのままにしておきます。\n\n10..  **Create** をクリックします。\n\n```\n[重要] 通知先としてはメールアドレス、Slack、Teams等のコラボレーションツール、Jira、Datadog Event Management等の問題管理ツール、ServiceNow等のITSMツール、他に汎用的なWebhookを用いたAPIコールも可能です。\n```\n```\n[重要] 通知文をカスタマイズ出来る点がポイントです。文面には設定されたモニターによるアラート通知を受けた際にどういったアクションを取るべきか、つまりアクショナブルなメッセージを記述すべきです。例えば連絡すべきチーム、併せて確認すべきポイント、該当サービスの状態を確認するためのURL、そして手順書等です。\n```\n\n### Monitor status page\n\n新しく作成されたモニターはデータが表示されるまでに数分かかるため、待っている間にモニターのインターフェイスを調べてください。\n\n![Discounts service request time monitor is in ok status.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/discounts_service_monitor.png)\n\nページの上部、モニター タイトルの隣にモニターのステータスが表示されます。 モニターは、関連するデータがモニターのしきい値を超えているかどうか (またはまったく報告していないか) に基づいて、`OK`, `Warn`, `Alert`, もしくは `No Data` の状態になります。\n\n- 右側には、**Mute** , **Escalate** (モニターが警告状態にある場合は **Resolve** )、および設定の歯車ボタンがあります。\n\n- **Mute** ボタンを使用すると、モニター全体をミュートしたり、スコープを設定して部分的にミュートしたりできます。\n\n- **Escalate** ドロップダウン メニューには、ケースを作成するか、インシデントを宣言するオプションがあります。\n\n- モニターがアラート状態にある場合は、モニターを手動で解決できる **Resolve** ボタンが表示されます。\n\n**Properties** セクションには、モニターのステータス、タイプ、ID、作成日、作成者、タグ、クエリ、受信者、およびメッセージの概要が表示されます。\n\n注: `trace.flask.request` メトリックは APM から発生する分散メトリックであるため、モニターは APM モニターです。\n\n- **Status & History**セクションには、モニターのステータスを経時的に示すステータス グラフが、履歴グラフと評価グラフとともに表示されます。\n\n- **Event** セクションには、アラートがいつトリガーまたは回復されたかなど、モニターから生成されたイベントが表示されます。\n\n**Status & History** セクションのグラフにはすでにデータが入力されているはずなので、詳しく見てみましょう。\n\n1.  グラフの時間枠を `Past 1 Hour` に変更します。\n\n![Status and history section showing the status graph and evaluation graph.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/tatus-history.png)\n\n2.  ステータスグラフを調べます。\n\n![Status graph shows just one group.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/status-graph.png)\n\nステータス グラフには、監視クエリのディメンションではなく、アラート用に構成したディメンションが表示されます。 たとえば、モニターのクエリが `service` と `host` ごとにグループ化されているが、アラートが `service` に対してのみ設定されている場合、ステータス グラフには `service` に対するモニターのステータスのみが表示されます。\n\n![Example of a status graph grouped by service.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/status-graph-grouped.png)\n\nただし、このアクティビティでは、`store-discounts` サービスのメトリクスのみを確認するように指定したため、ステータス グラフはグループ化されません。\n\n3.  履歴グラフを調べます。 収集されたデータがその上のステータス グラフと並べて表示されます。 モニターで、メトリック クエリに対して送信された生データ ポイントを確認できます。\n\n![History graph shows data for the past hour.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/history-graph.png)\n\n**Evaluation Graph** を調べます。 評価グラフはモニターごとに異なります。 履歴グラフと同じクエリ ロジックを使用しますが、スコープは履歴グラフの時間枠ブラケットに限定されます。 モニターの評価ウィンドウに対応する固定のズーム ウィンドウがあり、表示されたポイントが正しく集計されていることを確認します。\n\n![Evaluation graph shows data points where they fall in relation to the warning and alert thresholds.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/evaluation-graph.png)\n\n警告しきい値が黄色で網掛けされ、アラートしきい値が赤色で網掛けされていることに注目してください。\n\n```\n[重要] タグを使ってグループ化を行うことでモニタリング対象を自動追加すれば手動の監視対象追加は不要です。例えばモニタをhostタグでグループ化すれば、新たなホストが加わった際には当該ホストは自動的にモニターの対象となります。管理負荷低減と設定漏れの防止に寄与します。\n```"}}},{"id":"yk0ipa38","type":"notebook_cells","attributes":{"definition":{"type":"markdown","text":"### Monitor in alert status\n\nモニターがまだアラート ステータスになっていない場合は、モニターを編集してアラートのしきい値を下げ、アラートをトリガーします。\n\n1.  評価グラフを確認し、メトリクスがどの程度急上昇したかをメモします。\n\n2.  右上隅にある設定の歯車アイコンをクリックし、**Edit** を選択してモニターを編集します。\n\n3.  **Set alert conditions** で、アラートがトリガーされるように、**Alert threshold** と **Warning threshold** のしきい値を適宜下げます。 たとえば、アラートしきい値を 1.5 秒に設定し、警告しきい値を 1 秒に設定できます。\n\n![Alert and warning threshold is set to 1.5 and 1 second.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/lower-threshold.png)\n\n4.  **Save** をクリックしてモニターに戻ります。\n\n5.  モニターが更新されるまで待ち、評価グラフの陰影が新しい警告およびアラートのしきい値でどのように更新されたかを確認します。\n\n6.  アラートがトリガーされ、モニターのステータスが赤色に変わったら、ステータスと評価のグラフを確認してください。\n\n![Evaluation graph shows the metric reaching the alert threshold.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/eval-graph-alert.png)\n\n7.  **Event** セクションで、モニターを変更するイベントとアラートがいつトリガーされたかを確認します。\n\n![Events noting when the monitor was modified and when the alert was triggered.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/events-alert.png)\n\n通知を受け取るために電子メール アドレスを入力した場合、次の内容が届きます。\n\n![Notification email for alert triggered.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/triggered-email.png)\n\nメールにはメッセージ、クエリ、評価グラフが含まれます。\nまた、モニターが警告しきい値を超えた場合、およびアラート状態から回復した場合にも通知されます。\n\n![Notification email for monitor in warning status.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/warn-email.png)\n\n![Notification email for recovered monitor.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/recovered-email.png)\n\n注: [conditional variables](https://docs.datadoghq.com/ja/monitors/notify/variables/?tab=is_alert#conditional-variables) を使用すると、モニターのステータスまたはモニターのトリガー方法に関する詳細に応じて、さまざまなメッセージを表示できます。\n\n```\n[重要] 本セクションではアラート発報する値を静的に設定する、いわゆるしきい値監視を設定しました。Datadogでは通常のふるまいから逸脱した動きが一定時間以上あった際にアラート発報するAnomaly分析、同じふるまいをすべきグループ内で異なるふるまいを行うメンバーを検知するOutlier分析、またこのままのペースであるメトリクスが推移した場合に今後どういったふるまいをするかを予測するForecast分析をAIOpsの機能群として提供しており、人間が把握できない異常検知を支援する機能としてモニター設定の中で活用頂く事が可能です。\n```\n\n## Service Level Objectives(SLOs)\n\nSLO を使用すると、提供されるサービス、製品、またはアプリケーションの明確なパフォーマンス目標を設定し、長期的にこれらの目標をどれだけ達成できているかを測定できます。 Datadog では、SLO を使用して、パフォーマンス測定 (または一連の測定) が、7 日、30 日、または 90 日のローリング時間枠における目標時間割合 (デフォルトでは 99.9%) の最小しきい値を満たしているかどうかを判断します。この機能を使用すると、組織が外部顧客または内部エンド ユーザーに対するサービス義務をどの程度満たしているかを追跡できます。\n\nSLO の良い例は、「`discounts` サービスは 7 日間の 99.9% の時間で正常に実行される必要がある」などです。\n\n`discount` サービスのリクエスト時間をモニターとして構成したので、それを新しい SLO のサービス レベル インジケーター (SLI) として使用できます。\n\n1.  **[Service Mgmt > SLOs](https://app.datadoghq.com/slo/manage)** に移動します。\n\n2.  右上隅にある `New SLO` ボタンをクリックします。\n\n3.  **Select how to measure your SLO** で、`By Monitor Uptime` を選択します。\n\n4.  **Select monitors** ドロップダウン メニューから、`Discounts service request time` を選択します。\n\n5.  **Set your target & time window** で、デフォルト値の 99.9% (7 日間) のままにします。\n\n6.  **Add name and tags**で、**Name** を次のように設定します。\n\n```\nSLO: Discounts service request time\n```\n\n注: このアクティビティを完了するには、SLO の名前が上記と一致する必要があります。\n\n![New SLO settings are populated for the Discounts service request time SLO](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/new-slo.png)\n\n7.  **Create and Set Alert** をクリックします。 これにより、新しい SLO モニター設定ページが表示されます。\n**Select SLO** で、SLO がすでに選択されていることに注目してください。\n\n8.  **Set alert conditions** では、**Error Budget** をデフォルト値のままにします。 7 日間のターゲットのbudgetが 100% 消費されると、アラートが表示されます。\n\n9.  **Notify Your Team** で、モニターに次の名前を付けます。\n\n```\nSLO: Discounts service request time\n```\n\n10.  次のメッセージをメッセージ テキスト領域に貼り付けます。\n\n```\nDiscounts service request time budget depleted.\n```\n\n11.  このアクティビティでは、残りの設定はデフォルトのままにしておきます。\n\n12.  **Create** をクリックします。 これにより、新しい SLO モニター ページが表示されます。\n\n13.  **Properties** セクションで、**SLO: Discounts service request time** リンクをクリックして、新しいブラウザ ウィンドウで SLO サイド パネルを開きます。\n\n14.  **Status & History** タブをクリックして、実際の SLO を確認します。\n\n![The status and history for the SLO.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Metrics/slo-status-history.png)\n\nサイド パネルには、SLO の各ターゲットの全体的なステータスのパーセンテージと残りのエラー バジェットが表示されるほか、SLI の履歴のステータス バー (モニター ベースの SLO) または棒グラフ (メトリック ベースの SLO) も表示されます。\n\n```\n[重要] CPUやメモリ使用率等の「リソースメトリクス」ではなく、APMメトリクス等のエンドユーザに近いポイントで取得した「ワークメトリクス」を用いてSLIを定義することが重要です。\n```\n```\n[重要] 本セクションでは(モニターが正常である時間)/(総時間)でSLIを定義しましたが、カウンタ形式のメトリクスを用いて(Good Event数)/(Total Event数)という形でSLIを定義することも可能です。\n```\n\n---\n\n![](https://addons.mozilla.org/user-media/previews/thumbs/255/255651.jpg?modified=1622133878)\n\n---\n\n# Integration\n\nIntegrationとは、Datadogがサードパーティのアプリケーションなど、個々のテクノロジーを監視するためのアドオンソフトウェアパッケージです。この記事を書いている時点では、700以上のIntegrationが利用可能で、さらに定期的にリリースされています。\n\nIntegrationには主に3つのタイプがあります。エージェントベースのIntegration、認証ベースのIntegration、ライブラリIntegrationです。ほとんどのIntegrationは事前に構築されており、単にインストールするだけですが、独自のカスタムIntegrationを構築することもできます。\n\n- **AgentベースのIntegration**は、Datadog Agentと共にホストまたはコンテナにインストールされ、checkと呼ばれるPythonクラス・メソッドを使用して収集するメトリクスを定義します。\n\nDatadog Agentは、ホスト上で動作する重要なソフトウェアです。Datadog Agentはプロセスレベルのイベントとメトリクスを収集し、Datadogに送信します(このコースでは、全てのラボでDatadog Agentが既にインストールされています)。\n\nDatadogのデフォルトのAgentベースのIntegrationは、ディスク、CPU、メモリ、ネットワークスループットなどのパフォーマンスデータを収集し、組織のインフラストラクチャの主要なコンポーネントを監視する能力を提供します。\n\n- **認証(クローラー)ベースのIntegration**は、Datadogアプリで構成され、API経由でメトリクスやデータを取得するための認証情報を提供する必要があります。これらには、Slack、AWS、Azure、PagerDutyのような一般的なIntegrationが含まれます。\n\n- **Library Integration**は、Datadog APIを使用して、Node.jsやPythonなど、アプリケーションの記述言語に基づいてアプリケーションを監視することができます。\n\nDatadog Foundationのメニューより、[lab: Integrations](https://learn.datadoghq.com/courses/take/datadog-foundation/texts/43937388-lab-integrations)を選択し、`Launch`ボタンをクリックしてラボを起動してください。\n\n## Agent-based Integration\n\nAgentベースのIntegrationは、Datadog Agentと一緒にインストールされます。それぞれ、Agentが 15 秒ごとに実行するcheckというPythonメソッドを公開しています。そのためAgentのIntegrationは、特にAgentのコマンドラインインタフェースで作業する場合、\"checks\" とも呼ばれます。\n\nこのアクティビティでは、Agentコマンドを実行して、Agentが実行しているチェックを観察します。また、チェックが収集する正確なメトリクスを確認する方法と、そのドキュメントを見つける方法を学びます。\n\nStoredogのeコマース・ウェブサイトは、今あなたのラボの仮想マシンで実行されています。ターミナルに入る前に、数分かけてアプリケーションに慣れてください。\n\nStoredogタブをクリックして、新しいタブでアプリのホームページを開きます。最初のレンダリングにはしばらく時間がかかります。アプリを探索してください。各ページの上部には割引コードが表示され、下部には広告バナーがあります。これらは別々のマイクロサービスから構成されています。バックエンド、フロントエンド、関連サービスを提供するために、約10個のDockerコンテナが稼働しています。コンテナの1つはDatadog Agentで、仮想マシン、Dockerデーモン、デーモンが実行しているコンテナを監視しています。\n\n前述したように、このコンテキストにおけるAgentのIntegrationは \"チェック\" と呼ばれます。\n\n### Check status\n\nいくつかのシステムチェックは、エージェントに同梱されている数十のIntegration機能の中に含まれています。これらは、CPU、IO、負荷、メモリ、スワップ、アップタイムに関する基本システムからのメトリクスを提供します。\n\n今、あなたのラボでこれらのチェックが実行されているのを見てみます。\n\n1.  ターミナルで以下のコマンドを実行します。\n\n```\ndocker compose exec datadog agent status\n```\n\nこのコマンドは、コンテナオーケストレータである `docker compose` に、 `datadog` サービスコンテナ内で `agent status` コマンドを実行するように指示します。\n\nこれにより、エージェントのステータスに関する数ページの情報が出力され、その多くは実行中のチェックのステータスです。\n\n2.  出力をスクロールアップして、実行中のチェックに注目してください。CPU、メモリー、I/O、ディスクなどのシステムチェックを探してください。\n\n![system checks](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/agent_status_output.png)\n\n`Instance ID` の隣に、チェックの健全性が表示されます。この場合、`[OK]`です。\n\nさらにその下には、`Total Runs`があり、Agentが起動してからこのチェックを実行した回数が表示されます。\n\nまた、前回のチェックで収集されたメトリックサンプル数と、Agentの開始以降のこれらのサンプルの実行合計も表示されます。\n\n最後に、`Average Execution Time`, `Last Execution Date`、`Last Successful Execution Date`を見ることもできます。\n\nデフォルトでは、Disk Integrationは`Service Checks`を実行せず、`Events`も発行しません。\n\nまた、エージェントはこれらの情報を保持しません。エージェントが再起動すると、合計と平均はリセットされます。\n\n3. 次のスクリーンショットは、`postgres`のチェックが不健全であるシステムの`status`の出力を表示しています。\n\n![unhealthy postgres check](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/agent_status_postgres_error.png)\n\n`[ERROR]`インジケータと、チェックのPythonコードのスタックトレースを含む詳細情報を提供する`Error:`キーが追加されていることに注意してください。\n\n```\n[重要] disk以外にもどのようなチェックが動いているか確認してみましょう。nginx, postgres, regisdb等のチェックが動いており、Agentからnginx, postgres, regisdbの各エンドポイントにアクセスし統計情報を取得しています。\n```\n\n## Integrations in Datadog\n\nAgentにとってIntegrationとは、メトリクス、イベント、ログ、サービスチェックを収集する、Pythonのチェックの1つです。Datadogでは、Integrationは、すぐに使える（OOTB）ダッシュボード、パイプラインと呼ばれる特別なログ処理ルール、推奨モニタ、その他の資産を提供することもできます。\n\n```\n[重要] これによりユーザーは利用するサービスからすぐにデータ収集を開始でき、データの構造化、データ可視化、さらにはデータ監視設定もイチから行わず、Datadogが提供する雛形を活用することが出来ます。\n```\n\n### Open the Integrations page\n\n1.  ラボが作成した Datadog トレーニング アカウントの認証情報を使用して [Datadog](https://app.datadoghq.com/) にログインします。 試用版の認証情報を取得する必要があるときはいつでも、ラボ ターミナルで `creds` コマンドを実行できます。\n\n2.  Datadog にログインすると、自動検出されインストールされたIntegration機能の一部が Datadogホームページに表示されます。\n\n![Partial list of installed integrations on the app homepage](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/homepage_installed_integrations.png)\n\n3. グローバルナビゲーションで[Integrations](https://app.datadoghq.com/integrations)をクリックしてください。アイコンはパズルのピースです。\n\nIntegrationsはタイルとして表示され、**Autodetected Integrations**、**Installed**、**Available**の3つのカテゴリーに分類されます。\n\n![Integrations page with tiles grouped by autodetected, installed, and available](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/integrations_page_categories.png)\n\n- **Autodetected Integrations**は、エージェントによって検出されましたが、まだ構成されていません\n- **Installed** はエージェントによって検出され、設定を必要としません。設定は必要ありません。\n- **Available**は、エージェント以外のIntegrationを含む、それ以外のものです。次のアクティビティで学びます。\n\n4.  **Installed**セクションの下にあるIntegrationを確認してください。\n\n一般的に、エージェントがIntegrationのチェックを正常に実行している場合、そしてそのIntegrationが OOTB ダッシュボード、ログ、またはパイプラインに付属している場合、Integrationはここに表示されます。\n\n### Find configuration instructions\n\n1.  [Integrations](https://app.datadoghq.com/integrations)ページで、**Docker**タイルをクリックします。Integrationパネルが開きます。すべてのIntegrationパネルには、少なくとも**Overview**と**Configuration**（または**Configure**）タブがあります。\n\nまだ選択されていない場合は、[Configuration] タブをクリックします。このタブには、仮想ホスト上でDocker Integrationを設定するための手順が記載されており、[コンテナ化された Docker Agent ドキュメント](https://docs.datadoghq.com/ja/containers/docker/?tab=standard#setup) へのリンクもあります。\n\nこのラボでは、コンテナ化された Agent を使用しています。\n\n2.  Docker Integrationパネルで、**Metrics**タブをクリックします。\n\nここには、このIntegrationが収集するすべてのメトリクスが表示されます。\n\n3. より複雑な設定のIntegrationを見るには、Docker Integrationパネルを閉じ、**PostgreSQL**タイルをクリックします。\n\n4.  **Configure**タブをスクロールして、**Docker**セクションを見つけます。PostgreSQL Integrationがラボでどのように構成されているかを示します。\n\n5.  PostgreSQLパネルで、**Assets**タブをクリックします。このIntegrationがインストールされると自動的に作成されるその他のアセットが一覧表示されます。\n\n![PostgreSQL integration panel on the Assets tab](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/postgres_integration_assets.png)\n\nPostgreSQLの場合、2つのダッシュボードと2つの推奨モニターがあります。\n\n### Browse OOTB dashboards\n\n1.  PostgreSQL Integrationパネルの**Assets**タブで、**Dashboards**の下の**Postgres - Overview**をクリックします。\n\nこのIntegrationに含まれるPostgreSQL概要ダッシュボードが開きます。ダッシュボードは以下のようになります：\n\n![A partial view of the Postgres - Overview OOTB dashboard](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/postgres_overview_dashboard.png)\n\n他の OOTB ダッシュボードと同様に、このダッシュボードは、Integrationが構築されたコンポーネント（この場合は PostgreSQL）の監視を即座に開始するためのものであり、利用可能な可視化の例を提供します。\n   \n2.  グローバルナビゲーションの **[Dashboards](https://app.datadoghq.com/dashboard/lists)** をクリックして、ダッシュボードリストに移動します。\n\nここでは、すでにインストールされているIntegrationによって利用可能になった多くのOOTBダッシュボードを見ることができます。\n\n![Partial view of the Dashboards list displaying several OOTB from integrations](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/integration_ootb_dashboards_in_list.png)\n\nこれらのダッシュボードをご自由にご覧ください。\n\n```\n[重要] OOTBダッシュボード内のウィジェットをコピーし、自分のダッシュボードにペーストして好みのレイアウトとすることも可能です。\n```\n\n## Authentication and Library Integrations\n\nこのアクティビティでは、残りの2つのIntegrationタイプについて学びます。まず、認証ベースのIntegrationをいくつか見ていきます。次に、アプリケーションをクライアントライブラリでインスツルメンテーションする方法を説明します。\n\n### Authentication integrations\n\n認証ベースのIntegrationがサードパーティのデータをDatadogアカウントに取り込むために使用する一般的な方法は2つあります。\n\n- Datadogは、サードパーティAPIのAPIキー、トークン、その他の認証情報を使用して、データをDatadogに*プル*することができます。\n- サードパーティは、ユーザが提供する Datadog API キーを使用して、データを Datadog に*プッシュ*することができます。\n\n```\n[重要] 最も共通的に使われる認証ベースのIntegrationはクラウドプロバイダとのIntegrationです。Datadogに展開されたクローラーから各クラウドプロバイダのメトリクスエンドポイントに接続することで各クラウドサービスのメトリクスをDatadogに収集します。\n```\n\n#### Datadog pulls from third party\n\nCircleCIのIntegrationは、サードパーティのAPIからデータを引き出すIntegrationの例です。どのように構成されているか見てみましょう。\n\n1.  Datadogで、**[Integrations](https://app.datadoghq.com/integrations)**に移動します。\n\n2.  検索フィールドに`circleci`と入力します。\n\n![Searching for the CircleCI integration in Datadog](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/circle_ci_integration_search.png)\n\n3. `Integration`タグの付いたタイル（`Software License`ではない）をクリックして、Integrationの詳細パネルを開きます。\n\n4. **Configuration**タブをクリックし、説明をお読みください。\n\nCircleCIに接続するには、CircleCIアカウントにログインし、Datadog用のAPIトークンを生成します。\n\n5. **Add Account**ボタンをクリックしてください。\n\nここにAPIキーを貼り付け、関連するリポジトリ名を指定します。\n\n![CircleCI integration configuration with form to paste ](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/circle_ci_configuration_page.png)\n\nここでは説明のみであり、何も設定変更を行う必要はありません、\n\n6. Integrationパネルを閉じます。\n\n#### Datadog pushes to third party\n\nGitHub Integrationは、サードパーティがDatadogにデータをプッシュするIntegration例です。\n\n1. Integrationsの検索フィールドに`github`と入力します。\n\n![Searching for the GitHub integration in Datadog](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/github_integration_search.png)\n\n2. `by Datadog` と書かれたタイルをクリックして、の詳細パネルを開く。\n3. **Configuration**タブをクリックします。\n\nこのIntegrationは、GitHubアカウントに \"GitHub App\"を作成することで機能します。これはGitHubがあなたのリポジトリへの外部からのアクセスを制御する方法です。\n\n![The GitHub integration configuration page](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/github_configuration_first_view.png)\n\n4. **Create Your First GitHub App**ボタンをクリックします。\n\nフォームが表示されるので、IntegrationしたいGitHubアカウントの種類、有効にしたいIntegration機能の種類、そしてGitHub Appがリポジトリに対して持つ権限などを入力します。\n\n![The GitHub integration App configuration form](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/github_configuration_form.png)\n\nここでは説明のみであり、何も設定変更を行う必要はありません、\n\n5. このIntegrationを実際に設定する場合は、次のようにします。**Create App in GitHub** ボタンをクリックし、GitHub アカウントでさらに設定を進めます。\n\nこれらのステップを適切に実行し、後でこのページに戻ると、Integrationの初期設定が成功したことがわかります、 しかし、いくつかの機能を有効にするには、より細かい設定が必要であることもわかります。\n\n![The GitHub integration App configuration](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/github_configuration_page.png)\n\nIntegrationが設定されると、GitHub は Datadog のエンドポイントを呼び出してデータをアカウントにプッシュします。\n\n### Library integrations\n\nDatadog Integrationの第3のタイプは、クライアント・ライブラリです。これらのIntegrationは、 アプリケーションコードに直接インポートされるオープンソースのコードパッケージです。これらのライブラリを使用することで、開発者はアプリケーション・パフォーマンス・モニタリング（APM）のために、エージェントを通じてDatadogにトレースやプロファイリング・データを簡単に送信することができます。\n\nラボで実行されている e コマース・アプリケーションである Storedog は、いくつかのサービスによって提供されています。Rubyで書かれたものもあれば、Pythonで書かれたものもあります。これらの言語にはそれぞれDatadogのライブラリがあり、Storedogはすでに完全にインスツルメンテーションされています。\n\n```\n[重要] 先述したAPMはこのLibrary Integrationによってアプリケーションからデータを収集します。\n```\n\n#### Installing libraries\nDatadogは、様々なコンテキストでライブラリをコードにインストールするためのウィザードを提供します。\n\n1. Datadogで[APM > Setup & Configruation](https://app.datadoghq.com/apm/getting-started)に移動します。\n2. ページ上部の**[Instrument a new Service](https://app.datadoghq.com/apm/service-setup)**リンクをクリックします。\n3. 左側の**Container-Based**をクリックします\n4. **Docker**をクリックします。\n5. **Same host**をクリックします。\n6. **Python**をクリックします。\n\nコンテナの設定を支援するウィザードを含む、この構成用の Python アプリケーションのインスツルメンテーションの手順が表示されます：\n\n![APM for a docker python service](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Integration/ddtrace_pthon_configuration_wizard.png)\n\n最初の手順は **Run the Agent** であることに注意してください。エージェントは、アプリケーションからトレースデータを受け取る必要があります。\n\nここでは説明のみであり、何も設定変更を行う必要はありません、\n\n7. **Java**や**Ruby**など、他の言語をクリックして、指示がどのように変わるか見てください。\n\n```\n[重要] ご覧頂いた通り、基本的なAPMの設定はアプリケーションの起動コマンドやパラメータの設定で済み(自動インスツルメンテーションと呼びます)、アプリケーションのソースコードに手を入れて頂く必要はありません。アプリケーションでDatadog Libraryにてサポートされていないフレームワークをお使いの場合や、メタデータの細かい制御が必要な場合のみ、ソースコードに手を入れて頂く(カスタムインスツルメンテーションと呼びます)必要があります。\n```\n\n---\n\n![](https://addons.mozilla.org/user-media/previews/thumbs/255/255651.jpg?modified=1622133878)\n\n---\n\n# Dashboards\n\nダッシュボードを抜きにして、Datadogの主な機能と利点を語ることは出来ません。ダッシュボードを使用すると、さまざまなチャート、テーブル、グラフ、その他の視覚的なデータ表現を1つのページに統合することができます。すぐに使えるOOTBダッシュボードとカスタムダッシュボードの両方を通じて、システムの健全性にとって最も重要なメトリクスを明確かつ簡潔に把握することができます。すべてのダッシュボードは中央の場所に保存されるため、問題を特定し、傾向を検出し、システム・パフォーマンスを改善するための措置を講じるために必要な情報をすばやく見つけることができます。\n\nこれらのダッシュボードは、他のユーザーと共有することができます。ダッシュボードをURLや電子メールのリンクで共有することで、他の人がデータを変更することなく、リアルタイムでダッシュボードの内容を見せることができます。\n\nDatadog Foundationのメニューより、[lab: Dashboards](https://learn.datadoghq.com/courses/take/datadog-foundation/texts/43933092-lab-dashboards)を選択し、`Launch`ボタンをクリックしてラボを起動してください。\n\n## Dashboard list\n\nDatadog で利用可能ないくつかのすぐに使える (OOTB) ダッシュボードを見てみましょう。\n\n```\n[重要] Datadogは2024/1時点で450以上のOOTBダッシュボードを提供しています。\n```\n\n1.  ラボが作成した Datadog トレーニング アカウントの認証情報を使用して [Datadog](https://app.datadoghq.com/) にログインします。 試用版の認証情報を取得する必要があるときはいつでも、ラボ ターミナルで `creds` コマンドを実行できます。\n\n2.  **[Dashboards > Dashboard List](https://app.datadoghq.com/dashboard/lists)** に移動します。\nPostgres、Python、Redis、Ruby、NGINX などのIntegration機能とともにインストールされた、事前に構築されたダッシュボードが多数あることに気づくでしょう。\n\n3. 検索バーに `Postgres` と入力し始めます。 2 つの Postgres ダッシュボードが表示されます。\n\n4.  **Postgres - Metrics** ダッシュボードをクリックします。\n\n5.  時間枠を `Past 15 minutes` に設定します。\n\nPostgreSQL データベースとデータベース サーバーに関するリアルタイムのパフォーマンス データが表示され、パフォーマンスの問題のトラブルシューティングに役立つ可視性が提供されます。\n\n![Postgres metrics dashboard with four graph widgets.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/postgres-metrics-dashboard.png)\n\n6.  このダッシュボードを自分用にカスタマイズしたい場合は、複製を作成できます。\nダッシュボードの右上にある **Clone** ボタンをクリックします。\n\n7.  ポップアップ モーダルで、複製されたダッシュボードに新しい名前と説明を自由に入力できます。\n**Clone** をクリックします。\n\n8.  ウィジェットを再配置したり、新しいウィジェットを追加したりできるようになりました。\nウィジェットをクリックしてドラッグし、ダッシュボード上の位置を再配置します。\n\nこれらすべてのウィジェットが必要ない場合はどうすればよいでしょうか? クローンを作成する代わりに、独自のダッシュボードを最初から作成できます。\n\n## Create a dashboard\n\n独自のダッシュボードを作成し、OOTB ダッシュボードからウィジェットをコピーするか、既存のグラフをそこにエクスポートすることで、ダッシュボードを埋めることができます。 あるいは、新しいダッシュボードから新しいウィジェットを直接追加することもできます。\n\n```\n[重要] ダッシュボードの作成にも特別なクエリ言語の習得は必要ありません。組織全体向けのダッシュボードであっても、ある個人向けのダッシュボードであっても、ユーザーが自分の作りたいダッシュボードを体感的なインタフェースでお作りいただけます。\n```\n\n1.  **Dashboards > New Dashboard** に移動します。\n\n作成できるさまざまな種類のダッシュボード (グリッドベースのダッシュボード、タイムボード、スクリーンボード) に注目してください。\n\n![Create a Dashboard popup modal that shows different dashboard layouts.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/create-dashboard-modal.png)\n\n2.  **Dashboard Name** として以下を入力してください。\n\n```\nDatadog Foundation Dashboard\n```\n\n3.  **New Dashboard** をクリックします。\n空のダッシュボードが表示されますので、そのまま入力してください。\n\n4.  既存の OOTB ダッシュボードのウィジェットを使用する場合は、それらをコピーして貼り付けることができます。\n**Postgres - Metrics** ダッシュボードに戻ります。\n\nヒント: Cmd/Ctrl+K を押してクイック ナビゲーション メニューを開き、名前でダッシュボードを検索できます。\n\n5.  コピーしたいウィジェットを選択します。 ウィジェットの上にカーソルを置き、Cmd/Ctrl+C を押してウィジェットをコピーします。 ウィジェットがコピーされたことを示すメッセージが表示されます。\n\n![Popup modal confirming widget was copied to clipboard.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/copying_widget_from_preset.png)\n\n6.  **Done** をクリックします。\n\n7.  Cmd/Ctrl+Shift+K を押してクリップボードを開きます\n\n![Clipboard indicator showing one widget copied.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/clipboard_indicator.png)\n\nDatadog 全体のグラフ、ウィジェット、その他のコピー可能なリソースをここに収集し、後でノートブック、ダッシュボード、その他のページに貼り付けることができます。\n\n8.  Cmd/Ctrl+Shift+K をもう一度押すか、クリップボードの右上隅にある **x** をクリックしてクリップボードを閉じます。\n\n9.  `Datadog Foundation Dashboard` に戻ります。\n\n10.  **Add Widgets** サイド パネルが開いている場合は閉じます。 (このサイドパネルについては次のセクションで詳しく説明します。)\n\n11.  Cmd/Ctrl+V を押して、コピーしたウィジェットを貼り付けます。 あるいは、クリップボードにアクセスして、 **Paste on this page** ボタンをクリックすることもできます。\n\nコピーされたウィジェットがダッシュボードに表示されるはずです。\n\n![Dashboard with the copied widget pasted.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/copied-widget.png)\n\n12. Cmd/Ctrl+Shift+K をもう一度押すか、クリップボードの右上隅にある **x** をクリックしてクリップボードを閉じます。\n\n独自のダッシュボード ウィジェットを最初から作成して構成することもできます。\n\n## Add and configure a widget\n\n多くのウィジェット新規に作成したり、ダッシュボードに追加できます。 たとえば、ダッシュボードにメトリクス グラフを追加してみてください。\n\n1.  ダッシュボード ページの右上にある **+ Add Widgets** ボタンをクリックするか、ダッシュボードの中央にある大きな **Add Widgets or Powerpacks** の四角形をクリックして、 **Add Widgets** サイド パネルを開きます。\n\n2.  **Graphs**で、 `Timeseries` ウィジェットをクリックします。\n\n3.  Step 2 **Graph your data** で、 `system.cpu.user` を次のものに置き換えてクエリを変更します。\n\n```\ndocker.cpu.system\n```\n\nこれは、ページの上部で選択した時間枠にわたって、コンテナーのプロセスに代わって CPU がシステム コールを実行している時間の割合を反映する `docker.cpu.system` メトリック値をグラフ化します。\n\n4.  時間枠を `Past 15 minutes` に変更します。\n\n![Widget modal graphing docker.cpu.system over the past 15 minutes.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/widget-metrics-graph.png)\n\n5.  これを 1 つのサービス `store-discountsに` 絞り込みます。\n**from** フィールドに次のように入力してクエリを変更します。\n\n```\nservice:store-discounts\n```\n\n現在、グラフには、過去 15 分間 `store-discounts` サービスのみの `docker.cpu.system` に メトリック値が表示されています。\n\n![Widget modal graphing docker.cpu.system for the discounts service over the past 15 minutes.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/widget-discounts-metrics-graph.png)\n\n`Store-ads` サービスの `docker.cpu.system` メトリクスもグラフ化したい場合はどうすればよいでしょうか?\n **+ Add Query** ボタンをクリックして新しいクエリを追加し、今回は **from** フィールドを ``service:store-ads` に設定します。\n \n ![Widget modal graphing docker.cpu.system for the discounts and ads service over the past 15 minutes.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/widget-discounts-ads-metrics-graph.png)\n \n6.   ステップ 4 で、グラフにタイトルを付けます。自由に名前を付けます。 (提案されたタイトルを残すこともできます。)\n次に、 **Save** をクリックします。\n新しく作成したウィジェットがダッシュボードに表示されるはずです。\n\n![Newly created metrics graph widget on the Datadog Foundation Dashboard.](https://raw.githubusercontent.com/DataDog/Datadog-Labs-jp/main/foundation-lab/images/Dashboard/metrics-widget.png)\n\n注: メトリック エクスプローラーでこのグラフを作成し、そのグラフをこのダッシュボードにエクスポートすると、同じ結果が得られます。\n\n注: パワーパックを使用して、多くの関連ウィジェットを一度にダッシュボードに追加することもできます。 詳細については、[Scale Graphing Expertise with Powerpacks documentation](https://docs.datadoghq.com/ja/dashboards/guide/powerpacks-best-practices/) と、 [Save dashboard widgets in reusable groups with Powerpacks blog post](https://www.datadoghq.com/blog/standardize-dashboards-powerpacks-datadog/) を参照してください。\n\n---\n\n![](https://addons.mozilla.org/user-media/previews/thumbs/255/255651.jpg?modified=1622133878)\n\n---\n\n# Summary\n\n基礎から学ぶDatadog - ハンズオントレーニング 2024の終了おめでとうございます！\n\nこのコースでは、Datadogのような機能群を触ることにより、インフラやアプリケーションを含む環境全体を把握するための幅広いツールを提供する包括的な監視プラットフォームであることを学びました。\n\n- **Logs**では、インフラストラクチャやアプリケーション全体のイベントを記録し、メトリックスでは、長期的な測定値を追跡することができます。\n- **APM**では、ライブラリを読み込むことによりサービス間の呼び出しを可視化しアプリケーションレベルの健全性データを取得します。\n- **モニター**や**SLO**機能を用いてメトリクスを用いた監視やサービスの健全性の可視化を行います。\n- **Integration**により、サードパーティ製アプリケーションなど、環境のさまざまなコンポーネントからDatadogにすべてのメトリクスとログを取り込むことができ、システムを統合的に把握することができます。\n- **ダッシュボード**は、重要な観測データのさまざまな可視化を統合するための使いやすいインターフェイスを提供し、システムの健全性の特定の側面の概要をすばやく把握するのに役立ちます。\n\n# Next Steps\nこのコースは多くの内容をカバーしていますが、Datadogで実現できることのほんの表面をなぞったに過ぎません。学習を継続するために、[Datadog Learning Center](https://learn.datadoghq.com/)の他のコースを受講することをお勧めします。これらのコースの中には、セットアップ手順等、ここで学んだことの延長線上にあるものもあれば、Datadogの全く新しい側面を紹介するものもあります。以下はお勧めのコースです。\n\n-   [Datadog 101: Developer](https://learn.datadoghq.com/courses/dd-101-dev)\n-   [Datadog 101: Site Reliability Engineer](https://learn.datadoghq.com/courses/dd-101-sre)\n-   [Introduction to Integrations](https://learn.datadoghq.com/courses/intro-to-integrations)\n-   [Introduction to Log Management](https://learn.datadoghq.com/courses/intro-to-log-management)\n-   [Introduction to Application Performance Monitoring (APM)](https://learn.datadoghq.com/courses/intro-to-apm)\n-   [Introduction to Service Level Objectives](https://learn.datadoghq.com/courses/intro-to-slo)\n-   [Datadog 201: Becoming a Power User course](https://learn.datadoghq.com/courses/dd-201)-   [Datadog 101: Developer](https://learn.datadoghq.com/courses/dd-101-dev)\n-   [Datadog 101: Site Reliability Engineer](https://learn.datadoghq.com/courses/dd-101-sre)\n-   [Introduction to Integrations](https://learn.datadoghq.com/courses/intro-to-integrations)\n-   [Introduction to Log Management](https://learn.datadoghq.com/courses/intro-to-log-management)\n-   [Introduction to Application Performance Monitoring (APM)](https://learn.datadoghq.com/courses/intro-to-apm)\n-   [Introduction to Service Level Objectives](https://learn.datadoghq.com/courses/intro-to-slo)\n-   [Datadog 201: Becoming a Power User course](https://learn.datadoghq.com/courses/dd-201)"}}}],"template_variables":[]}}}